import * as ts from 'typescript';
export declare class MetadataGenerator {
    private static current;
    private nodes;
    private typeChecker;
    private referenceTypes;
    static Current(): MetadataGenerator;
    static IsExportedNode(node: ts.Node): boolean;
    constructor();
    Generate(entryFile: string): Metadata;
    Nodes(): ts.Node[];
    TypeChecker(): ts.TypeChecker;
    AddReferenceType(referenceType: ReferenceType): void;
    GetReferenceType(typeName: string): ReferenceType;
    private buildControllers();
}
export interface Metadata {
    Controllers: Controller[];
    ReferenceTypes: {
        [typeName: string]: ReferenceType;
    };
}
export interface Controller {
    location: string;
    methods: Method[];
    name: string;
    path: string;
}
export interface Method {
    description: string;
    example: any;
    method: string;
    name: string;
    parameters: Parameter[];
    path: string;
    type: Type;
}
export interface Parameter {
    description: string;
    in: string;
    name: string;
    required: boolean;
    type: Type;
}
export declare type Type = PrimitiveType | ReferenceType | ArrayType;
export declare type PrimitiveType = string;
export interface ReferenceType {
    description: string;
    name: string;
    properties: Property[];
}
export interface Property {
    description: string;
    name: string;
    type: Type;
    required: boolean;
}
export interface ArrayType {
    elementType: Type;
}
