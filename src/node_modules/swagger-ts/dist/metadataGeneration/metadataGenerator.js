"use strict";
const ts = require('typescript');
const controllerGenerator_1 = require('./controllerGenerator');
class MetadataGenerator {
    constructor() {
        this.nodes = new Array();
        this.referenceTypes = {};
        MetadataGenerator.current = this;
    }
    static Current() {
        return MetadataGenerator.current;
    }
    static IsExportedNode(node) {
        return (node.flags & ts.NodeFlags.Export) !== 0 || (node.parent && node.parent.kind === ts.SyntaxKind.SourceFile);
    }
    Generate(entryFile) {
        const program = ts.createProgram([entryFile], {});
        this.typeChecker = program.getTypeChecker();
        program.getSourceFiles().forEach(sf => {
            ts.forEachChild(sf, node => {
                this.nodes.push(node);
            });
        });
        const controllers = this.buildControllers();
        return {
            Controllers: controllers,
            ReferenceTypes: this.referenceTypes
        };
    }
    Nodes() {
        return this.nodes;
    }
    TypeChecker() {
        return this.typeChecker;
    }
    AddReferenceType(referenceType) {
        this.referenceTypes[referenceType.name] = referenceType;
    }
    GetReferenceType(typeName) {
        return this.referenceTypes[typeName];
    }
    buildControllers() {
        return this.nodes
            .filter(node => node.kind === ts.SyntaxKind.ClassDeclaration && MetadataGenerator.IsExportedNode(node))
            .map((classDeclaration) => new controllerGenerator_1.ControllerGenerator(classDeclaration))
            .filter(generator => generator.IsValid())
            .map(generator => generator.Generate());
    }
}
exports.MetadataGenerator = MetadataGenerator;
//# sourceMappingURL=metadataGenerator.js.map