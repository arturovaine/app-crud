"use strict";
const ts = require('typescript');
const methodGenerator_1 = require('./methodGenerator');
class ControllerGenerator {
    constructor(node) {
        this.node = node;
        this.pathValue = this.getControllerRouteValue(node);
    }
    IsValid() {
        return !!this.pathValue;
    }
    Generate() {
        const sourceFile = this.node.parent.getSourceFile();
        return {
            location: sourceFile.fileName,
            methods: this.buildMethods(),
            name: this.node.name.text,
            path: this.pathValue
        };
    }
    buildMethods() {
        return this.node.members
            .filter(m => m.kind === ts.SyntaxKind.MethodDeclaration)
            .map((m) => new methodGenerator_1.MethodGenerator(m))
            .filter(generator => generator.IsValid())
            .map(generator => generator.Generate());
    }
    getControllerRouteValue(node) {
        if (!node.decorators) {
            return null;
        }
        const matchedAttributes = node.decorators
            .map(d => d.expression)
            .filter(expression => {
            const subExpression = expression.expression;
            return subExpression.text === 'Route';
        });
        if (!matchedAttributes.length) {
            return null;
        }
        if (matchedAttributes.length > 1) {
            throw new Error('A controller can only have a single "Route" decorator.');
        }
        const value = matchedAttributes[0].arguments[0];
        return value.text;
    }
}
exports.ControllerGenerator = ControllerGenerator;
//# sourceMappingURL=controllerGenerator.js.map