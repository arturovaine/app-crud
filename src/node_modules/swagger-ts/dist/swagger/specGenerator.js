"use strict";
const fs = require('fs');
class SpecGenerator {
    constructor(metadata) {
        this.metadata = metadata;
    }
    GenerateJson(outDir) {
        fs.writeFile(`${outDir}/swagger.json`, JSON.stringify(this.GetSpec(), null, '\t'), err => {
            if (err) {
                throw new Error(err.toString());
            }
            ;
        });
    }
    GetSpec() {
        return {
            basePath: '/',
            consumes: ['application/json'],
            definitions: this.buildDefinitions(),
            host: 'localhost:3000',
            info: {
                title: 'Lucid Web API',
                version: '0.0.1'
            },
            paths: this.buildPaths(),
            produces: ['application/json'],
            swagger: '2.0'
        };
    }
    buildDefinitions() {
        const definitions = {};
        Object.keys(this.metadata.ReferenceTypes).map(typeName => {
            const referenceType = this.metadata.ReferenceTypes[typeName];
            definitions[referenceType.name] = {
                description: referenceType.description,
                properties: this.buildProperties(referenceType.properties),
                required: referenceType.properties.filter(p => p.required).map(p => p.name),
                type: 'object'
            };
        });
        return definitions;
    }
    buildPaths() {
        const paths = {};
        this.metadata.Controllers.forEach(controller => {
            controller.methods.forEach(method => {
                paths[`/${controller.path}${method.path}`] = this.buildPathObject(method);
            });
        });
        return paths;
    }
    buildPathObject(method) {
        const swaggerType = this.getSwaggerType(method.type);
        const pathObject = {};
        const pathMethod = pathObject[method.method] = swaggerType
            ? this.get200Operation(swaggerType, method.example)
            : this.get204Operation();
        pathMethod.description = method.description;
        pathMethod.parameters = method.parameters.map(p => this.buildParameter(p));
        if (pathMethod.parameters.filter((p) => p.in === 'body').length > 1) {
            throw new Error('Only one body parameter allowed per controller method.');
        }
        return pathObject;
    }
    buildParameter(parameter) {
        const swaggerParameter = {
            description: parameter.description,
            in: parameter.in,
            name: parameter.name,
            required: parameter.required
        };
        const parameterType = this.getSwaggerType(parameter.type);
        if (parameterType.$ref) {
            swaggerParameter.schema = parameterType;
        }
        else {
            swaggerParameter.type = parameterType.type;
        }
        return swaggerParameter;
    }
    buildProperties(properties) {
        const swaggerProperties = {};
        properties.forEach(property => {
            const swaggerType = this.getSwaggerType(property.type);
            swaggerType.description = property.description;
            swaggerProperties[property.name] = swaggerType;
        });
        return swaggerProperties;
    }
    getSwaggerType(type) {
        if (typeof type === 'string' || type instanceof String) {
            return this.getSwaggerTypeForPrimitiveType(type);
        }
        const arrayType = type;
        if (arrayType.elementType) {
            return this.getSwaggerTypeForArrayType(arrayType);
        }
        return this.getSwaggerTypeForReferenceType(type);
    }
    getSwaggerTypeForPrimitiveType(primitiveTypeName) {
        const typeMap = {};
        typeMap['number'] = { format: 'int64', type: 'integer' };
        typeMap['string'] = { type: 'string' };
        typeMap['boolean'] = { type: 'boolean' };
        typeMap['void'] = null;
        return typeMap[primitiveTypeName];
    }
    getSwaggerTypeForArrayType(arrayType) {
        const elementType = arrayType.elementType;
        return { items: this.getSwaggerType(elementType), type: 'array' };
    }
    getSwaggerTypeForReferenceType(referenceType) {
        return { $ref: `#/definitions/${referenceType.name}` };
    }
    get200Operation(swaggerType, example) {
        return {
            produces: ['application/json'],
            responses: {
                '200': { description: '', examples: { 'application/json': example }, schema: swaggerType }
            }
        };
    }
    get204Operation() {
        return { responses: { '204': { description: 'No content' } } };
    }
}
exports.SpecGenerator = SpecGenerator;
//# sourceMappingURL=specGenerator.js.map