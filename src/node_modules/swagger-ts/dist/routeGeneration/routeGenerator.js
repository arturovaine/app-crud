"use strict";
const express_1 = require('./templates/express');
const templateHelpers_1 = require('./templateHelpers');
const fs = require('fs');
const handlebars = require('handlebars');
const path = require('path');
const tsfmt = require('typescript-formatter');
const appRoot = require('app-root-path').path;
class RouteGenerator {
    constructor(metadata, routeDir) {
        this.metadata = metadata;
        this.routeDir = routeDir;
    }
    GenerateRoutes(middlewareTemplate) {
        const fileName = `${this.routeDir}/routes.ts`;
        const content = this.buildContent(middlewareTemplate);
        return new Promise((resolve, reject) => {
            tsfmt.processString(fileName, content, {})
                .then(result => fs.writeFile(fileName, result.dest, (err) => resolve()));
        });
    }
    GenerateExpressRoutes() {
        return this.GenerateRoutes(express_1.expressTemplate);
    }
    buildContent(middlewareTemplate) {
        const routesTemplate = handlebars.compile(`
            {{#each controllers}}
            import { {{name}} } from '{{modulePath}}';
            {{/each}}

            const models: any = {
                {{#each models}}
                '{{name}}': {
                    {{#each properties}}
                        '{{name}}': { typeName: '{{typeName}}', required: {{required}} {{#if arrayType}}, arrayType: '{{arrayType}}' {{/if}} },
                    {{/each}}
                },
                {{/each}}
            };
        `.concat(middlewareTemplate));
        return routesTemplate({
            controllers: this.metadata.Controllers.map(controller => {
                return {
                    actions: controller.methods.map(method => {
                        const bodyParameter = method.parameters.find(parameter => parameter.in === 'body');
                        return {
                            bodyParamName: bodyParameter ? bodyParameter.name : undefined,
                            method: method.method.toLowerCase(),
                            name: method.name,
                            parameters: method.parameters.map(parameter => this.getTemplateProperty(parameter)),
                            path: this.getExpressPath(method.path)
                        };
                    }),
                    modulePath: this.getRelativeImportPath(controller.location),
                    name: controller.name,
                    path: controller.path
                };
            }),
            models: this.getModels()
        }).concat(templateHelpers_1.templateHelpersContent);
    }
    getModels() {
        return Object.keys(this.metadata.ReferenceTypes).map(key => {
            const referenceType = this.metadata.ReferenceTypes[key];
            return {
                name: key,
                properties: referenceType.properties.map(property => this.getTemplateProperty(property))
            };
        });
    }
    getStringRepresentationOfType(type) {
        if (typeof type === 'string' || type instanceof String) {
            return type;
        }
        const arrayType = type;
        if (arrayType.elementType) {
            return 'array';
        }
        return type.name;
    }
    getRelativeImportPath(controllerLocation) {
        controllerLocation = controllerLocation.replace('.ts', '');
        return `./${path.relative(path.join(appRoot, this.routeDir), controllerLocation).replace(/\\/g, '/')}`;
    }
    getTemplateProperty(source) {
        const templateProperty = {
            name: source.name,
            required: source.required,
            typeName: this.getStringRepresentationOfType(source.type)
        };
        const arrayType = source.type;
        if (arrayType.elementType) {
            templateProperty.arrayType = this.getStringRepresentationOfType(arrayType.elementType);
        }
        return templateProperty;
    }
    getExpressPath(path) {
        return path.replace(/{/g, ':').replace(/}/g, '');
    }
}
exports.RouteGenerator = RouteGenerator;
//# sourceMappingURL=routeGenerator.js.map