"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileGeneratedArtifacts = void 0;
const path_1 = require("path");
const ts = require("typescript");
const utils_1 = require("./utils");
function compileGeneratedArtifacts(swagger, options) {
    utils_1.log('compiling generated artifacts...');
    const modelFolder = path_1.normalize(options.modelFolder);
    const folder = path_1.resolve(modelFolder);
    const fileNames = utils_1.getFiles(folder);
    const fullFileNames = fileNames.map(item => path_1.resolve(__dirname, folder, item));
    let program = ts.createProgram(fullFileNames, {
        noEmitOnError: true,
        noImplicitAny: false,
        target: ts.ScriptTarget.ES5,
        module: ts.ModuleKind.CommonJS
    });
    let emitResult = program.emit();
    let allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
    allDiagnostics.forEach(diagnostic => {
        if (diagnostic.file) {
            // ignore files in node_modules
            if (diagnostic.file.fileName.indexOf('/node_modules') === -1) {
                let { line, character } = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);
                let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                utils_1.logError(`${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);
            }
        }
        else {
            utils_1.logError(ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n'));
        }
    });
    let exitCode = emitResult.emitSkipped ? 1 : 0;
    utils_1.log(`TS Compile exiting with code '${exitCode}'.`);
    // process.exit(exitCode);
}
exports.compileGeneratedArtifacts = compileGeneratedArtifacts;
