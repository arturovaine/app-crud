/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
{{#enumTypeCollection}}
export enum {{type}} {
{{#valuesAndLabels}}
    {{value}} = <any>"{{value}}",
{{/valuesAndLabels}}
}

{{/enumTypeCollection}}

{{#if generateClasses}}
/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

{{#enumTypeCollection}}
    {{type}} = {{type}};
{{/enumTypeCollection}}
}

/**
* union type of all enums.
* Useful for typing params and variables in generic components.
*/
export type AllEnumsType =
{{#enumTypeCollection}}
    | {{type}}
{{/enumTypeCollection}}
    ;
{{/if}}
