/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IFee, Fee } from './fee.model';
import { EurapcoServiceType } from './enums';
import { Condition } from './enums';

export interface ICommission extends IFee{
    servicesProvided?: Array<EurapcoServiceType>;
    conditions?: Array<Condition>;
}


export class Commission extends Fee implements ICommission  {
    static TYPE_SELECTOR = 'Commission';

    static SERVICES_PROVIDED_FIELD_NAME = 'servicesProvided';
    static CONDITIONS_FIELD_NAME = 'conditions';

    servicesProvided: Array<EurapcoServiceType>;
    conditions: Array<Condition>;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<ICommission>) {
        super();

        this.typeSelector = Commission.TYPE_SELECTOR;
        this.servicesProvided = new Array<EurapcoServiceType>(); 
        this.conditions = new Array<Condition>(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<ICommission>): void {
        if (values) {
            super.setValues(values)
            const rawValues = values
            this.fillModelArray<EurapcoServiceType>(this, Commission.SERVICES_PROVIDED_FIELD_NAME, rawValues.servicesProvided);
            this.fillModelArray<Condition>(this, Commission.CONDITIONS_FIELD_NAME, rawValues.conditions);
        }
    }
}
