/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IElectronicAddress, ElectronicAddress } from './electronic-address.model';
import { IPostalAddress, PostalAddress } from './postal-address.model';
import { IRegisteredIdentifier, RegisteredIdentifier } from './registered-identifier.model';
import { ITelephoneNumber, TelephoneNumber } from './telephone-number.model';
import { IX500Name, X500Name } from './x-500-name.model';

export interface IIssueCompany {
    businessNetworkAndMembershipMap?: object;
    electronicAddresses?: Array<IElectronicAddress>;
    name: string;
    parentOrganisation?: string;
    partyId?: string;
    postalAddresses?: Array<IPostalAddress>;
    registeredIdentifiers?: Array<IRegisteredIdentifier>;
    telephoneNumbers?: Array<ITelephoneNumber>;
    typeSelector: string;
    x500Name?: IX500Name;
}


export class IssueCompany extends BaseModel implements IIssueCompany  {
    static TYPE_SELECTOR = 'IssueCompany';

    static BUSINESS_NETWORK_AND_MEMBERSHIP_MAP_FIELD_NAME = 'businessNetworkAndMembershipMap';
    static ELECTRONIC_ADDRESSES_FIELD_NAME = 'electronicAddresses';
    static NAME_FIELD_NAME = 'name';
    static PARENT_ORGANISATION_FIELD_NAME = 'parentOrganisation';
    static PARTY_ID_FIELD_NAME = 'partyId';
    static POSTAL_ADDRESSES_FIELD_NAME = 'postalAddresses';
    static REGISTERED_IDENTIFIERS_FIELD_NAME = 'registeredIdentifiers';
    static TELEPHONE_NUMBERS_FIELD_NAME = 'telephoneNumbers';
    static TYPE_SELECTOR_FIELD_NAME = 'typeSelector';
    static X_500_NAME_FIELD_NAME = 'x500Name';

    businessNetworkAndMembershipMap: object;
    electronicAddresses: Array<ElectronicAddress>;
    name: string;
    parentOrganisation: string;
    partyId: string;
    postalAddresses: Array<PostalAddress>;
    registeredIdentifiers: Array<RegisteredIdentifier>;
    telephoneNumbers: Array<TelephoneNumber>;
    typeSelector: string;
    x500Name: X500Name;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IIssueCompany>) {
        super();

        this.typeSelector = IssueCompany.TYPE_SELECTOR;
        this.electronicAddresses = new Array<ElectronicAddress>(); 
        this.postalAddresses = new Array<PostalAddress>(); 
        this.registeredIdentifiers = new Array<RegisteredIdentifier>(); 
        this.telephoneNumbers = new Array<TelephoneNumber>(); 
        this.x500Name = new X500Name(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IIssueCompany>): void {
        if (values) {
            
            const rawValues = values
            this.businessNetworkAndMembershipMap = this.getValue<object>(rawValues, IssueCompany.BUSINESS_NETWORK_AND_MEMBERSHIP_MAP_FIELD_NAME);
            this.fillModelArray<IElectronicAddress>(this, IssueCompany.ELECTRONIC_ADDRESSES_FIELD_NAME, rawValues.electronicAddresses, ElectronicAddress, SubTypeFactory.createSubTypeInstance);
            this.name = this.getValue<string>(rawValues, IssueCompany.NAME_FIELD_NAME);
            this.parentOrganisation = this.getValue<string>(rawValues, IssueCompany.PARENT_ORGANISATION_FIELD_NAME);
            this.partyId = this.getValue<string>(rawValues, IssueCompany.PARTY_ID_FIELD_NAME);
            this.fillModelArray<IPostalAddress>(this, IssueCompany.POSTAL_ADDRESSES_FIELD_NAME, rawValues.postalAddresses, PostalAddress, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<IRegisteredIdentifier>(this, IssueCompany.REGISTERED_IDENTIFIERS_FIELD_NAME, rawValues.registeredIdentifiers, RegisteredIdentifier, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<ITelephoneNumber>(this, IssueCompany.TELEPHONE_NUMBERS_FIELD_NAME, rawValues.telephoneNumbers, TelephoneNumber, SubTypeFactory.createSubTypeInstance);
            this.typeSelector = this.getValue<string>(rawValues, IssueCompany.TYPE_SELECTOR_FIELD_NAME);
            this.x500Name.setValues(rawValues.x500Name);
        }
    }
}
