/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { EntityTypeSelector } from './enums';

export interface IChangeNotificationEntity {
    dateTime?: Date;
    description?: string;
    entityTypeSelector?: EntityTypeSelector;
    id?: string;
    name?: string;
    parentEntity?: IChangeNotificationEntity;
}


export class ChangeNotificationEntity extends BaseModel implements IChangeNotificationEntity  {

    static DATE_TIME_FIELD_NAME = 'dateTime';
    static DESCRIPTION_FIELD_NAME = 'description';
    static ENTITY_TYPE_SELECTOR_FIELD_NAME = 'entityTypeSelector';
    static ID_FIELD_NAME = 'id';
    static NAME_FIELD_NAME = 'name';
    static PARENT_ENTITY_FIELD_NAME = 'parentEntity';

    dateTime: Date;
    description: string;
    entityTypeSelector: EntityTypeSelector;
    id: string;
    name: string;
    parentEntity: ChangeNotificationEntity;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IChangeNotificationEntity>) {
        super();
        this.parentEntity = new ChangeNotificationEntity(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IChangeNotificationEntity>): void {
        if (values) {
            
            const rawValues = values
            this.dateTime = this.getValue<Date>(rawValues, ChangeNotificationEntity.DATE_TIME_FIELD_NAME);
            this.description = this.getValue<string>(rawValues, ChangeNotificationEntity.DESCRIPTION_FIELD_NAME);
            this.entityTypeSelector = this.getValue<EntityTypeSelector>(rawValues, ChangeNotificationEntity.ENTITY_TYPE_SELECTOR_FIELD_NAME);
            this.id = this.getValue<string>(rawValues, ChangeNotificationEntity.ID_FIELD_NAME);
            this.name = this.getValue<string>(rawValues, ChangeNotificationEntity.NAME_FIELD_NAME);
            this.parentEntity.setValues(rawValues.parentEntity);
        }
    }
}
