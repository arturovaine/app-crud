/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IBomBoundedPeriod, BomBoundedPeriod } from './bom-bounded-period.model';
import { IBomPostalAddress, BomPostalAddress } from './bom-postal-address.model';
import { IBomRegisteredIdentifier, BomRegisteredIdentifier } from './bom-registered-identifier.model';
import { IBomTelephoneNumber, BomTelephoneNumber } from './bom-telephone-number.model';
import { IBomX500Name, BomX500Name } from './bom-x-500-name.model';
import { BomCompanyRole } from './enums';

export interface IBomCompany {
    effectivePeriod?: IBomBoundedPeriod;
    id?: string;
    name?: string;
    postalAddresses?: Array<IBomPostalAddress>;
    registeredIdentifiers?: Array<IBomRegisteredIdentifier>;
    roles?: Array<BomCompanyRole>;
    telephoneNumbers?: Array<IBomTelephoneNumber>;
    x500Name?: IBomX500Name;
}


export class BomCompany extends BaseModel implements IBomCompany  {

    static EFFECTIVE_PERIOD_FIELD_NAME = 'effectivePeriod';
    static ID_FIELD_NAME = 'id';
    static NAME_FIELD_NAME = 'name';
    static POSTAL_ADDRESSES_FIELD_NAME = 'postalAddresses';
    static REGISTERED_IDENTIFIERS_FIELD_NAME = 'registeredIdentifiers';
    static ROLES_FIELD_NAME = 'roles';
    static TELEPHONE_NUMBERS_FIELD_NAME = 'telephoneNumbers';
    static X_500_NAME_FIELD_NAME = 'x500Name';

    effectivePeriod: BomBoundedPeriod;
    id: string;
    name: string;
    postalAddresses: Array<BomPostalAddress>;
    registeredIdentifiers: Array<BomRegisteredIdentifier>;
    roles: Array<BomCompanyRole>;
    telephoneNumbers: Array<BomTelephoneNumber>;
    x500Name: BomX500Name;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IBomCompany>) {
        super();
        this.effectivePeriod = new BomBoundedPeriod(); 
        this.postalAddresses = new Array<BomPostalAddress>(); 
        this.registeredIdentifiers = new Array<BomRegisteredIdentifier>(); 
        this.roles = new Array<BomCompanyRole>(); 
        this.telephoneNumbers = new Array<BomTelephoneNumber>(); 
        this.x500Name = new BomX500Name(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IBomCompany>): void {
        if (values) {
            
            const rawValues = values
            this.effectivePeriod.setValues(rawValues.effectivePeriod);
            this.id = this.getValue<string>(rawValues, BomCompany.ID_FIELD_NAME);
            this.name = this.getValue<string>(rawValues, BomCompany.NAME_FIELD_NAME);
            this.fillModelArray<IBomPostalAddress>(this, BomCompany.POSTAL_ADDRESSES_FIELD_NAME, rawValues.postalAddresses, BomPostalAddress, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<IBomRegisteredIdentifier>(this, BomCompany.REGISTERED_IDENTIFIERS_FIELD_NAME, rawValues.registeredIdentifiers, BomRegisteredIdentifier, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<BomCompanyRole>(this, BomCompany.ROLES_FIELD_NAME, rawValues.roles);
            this.fillModelArray<IBomTelephoneNumber>(this, BomCompany.TELEPHONE_NUMBERS_FIELD_NAME, rawValues.telephoneNumbers, BomTelephoneNumber, SubTypeFactory.createSubTypeInstance);
            this.x500Name.setValues(rawValues.x500Name);
        }
    }
}
