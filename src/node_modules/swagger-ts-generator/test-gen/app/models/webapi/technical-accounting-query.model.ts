/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { AccountItemDueStatus } from './enums';
import { AccountItemType } from './enums';
import { FinancialEventType } from './enums';

export interface ITechnicalAccountingQuery {
    accountId?: string;
    accountItemDueStatus?: AccountItemDueStatus;
    accountItemType?: AccountItemType;
    contractId?: string;
    contractName?: string;
    creditorPartyId?: string;
    debtorPartyId?: string;
    eventType?: FinancialEventType;
    filterPeriodEnd?: Date;
    filterPeriodStart?: Date;
    financialEventId?: string;
    processId?: string;
    programName?: string;
}


export class TechnicalAccountingQuery extends BaseModel implements ITechnicalAccountingQuery  {

    static ACCOUNT_ID_FIELD_NAME = 'accountId';
    static ACCOUNT_ITEM_DUE_STATUS_FIELD_NAME = 'accountItemDueStatus';
    static ACCOUNT_ITEM_TYPE_FIELD_NAME = 'accountItemType';
    static CONTRACT_ID_FIELD_NAME = 'contractId';
    static CONTRACT_NAME_FIELD_NAME = 'contractName';
    static CREDITOR_PARTY_ID_FIELD_NAME = 'creditorPartyId';
    static DEBTOR_PARTY_ID_FIELD_NAME = 'debtorPartyId';
    static EVENT_TYPE_FIELD_NAME = 'eventType';
    static FILTER_PERIOD_END_FIELD_NAME = 'filterPeriodEnd';
    static FILTER_PERIOD_START_FIELD_NAME = 'filterPeriodStart';
    static FINANCIAL_EVENT_ID_FIELD_NAME = 'financialEventId';
    static PROCESS_ID_FIELD_NAME = 'processId';
    static PROGRAM_NAME_FIELD_NAME = 'programName';

    accountId: string;
    accountItemDueStatus: AccountItemDueStatus;
    accountItemType: AccountItemType;
    contractId: string;
    contractName: string;
    creditorPartyId: string;
    debtorPartyId: string;
    eventType: FinancialEventType;
    filterPeriodEnd: Date;
    filterPeriodStart: Date;
    financialEventId: string;
    processId: string;
    programName: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<ITechnicalAccountingQuery>) {
        super();

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<ITechnicalAccountingQuery>): void {
        if (values) {
            
            const rawValues = values
            this.accountId = this.getValue<string>(rawValues, TechnicalAccountingQuery.ACCOUNT_ID_FIELD_NAME);
            this.accountItemDueStatus = this.getValue<AccountItemDueStatus>(rawValues, TechnicalAccountingQuery.ACCOUNT_ITEM_DUE_STATUS_FIELD_NAME);
            this.accountItemType = this.getValue<AccountItemType>(rawValues, TechnicalAccountingQuery.ACCOUNT_ITEM_TYPE_FIELD_NAME);
            this.contractId = this.getValue<string>(rawValues, TechnicalAccountingQuery.CONTRACT_ID_FIELD_NAME);
            this.contractName = this.getValue<string>(rawValues, TechnicalAccountingQuery.CONTRACT_NAME_FIELD_NAME);
            this.creditorPartyId = this.getValue<string>(rawValues, TechnicalAccountingQuery.CREDITOR_PARTY_ID_FIELD_NAME);
            this.debtorPartyId = this.getValue<string>(rawValues, TechnicalAccountingQuery.DEBTOR_PARTY_ID_FIELD_NAME);
            this.eventType = this.getValue<FinancialEventType>(rawValues, TechnicalAccountingQuery.EVENT_TYPE_FIELD_NAME);
            this.filterPeriodEnd = this.getValue<Date>(rawValues, TechnicalAccountingQuery.FILTER_PERIOD_END_FIELD_NAME);
            this.filterPeriodStart = this.getValue<Date>(rawValues, TechnicalAccountingQuery.FILTER_PERIOD_START_FIELD_NAME);
            this.financialEventId = this.getValue<string>(rawValues, TechnicalAccountingQuery.FINANCIAL_EVENT_ID_FIELD_NAME);
            this.processId = this.getValue<string>(rawValues, TechnicalAccountingQuery.PROCESS_ID_FIELD_NAME);
            this.programName = this.getValue<string>(rawValues, TechnicalAccountingQuery.PROGRAM_NAME_FIELD_NAME);
        }
    }
}
