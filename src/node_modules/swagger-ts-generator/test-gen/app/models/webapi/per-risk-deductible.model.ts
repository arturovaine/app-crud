/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IDeductible, Deductible } from './deductible.model';
import { IRiskType, RiskType } from './risk-type.model';

export interface IPerRiskDeductible extends IDeductible{
    riskTypes?: Array<IRiskType>;
}


export class PerRiskDeductible extends Deductible implements IPerRiskDeductible  {
    static TYPE_SELECTOR = 'PerRiskDeductible';

    static RISK_TYPES_FIELD_NAME = 'riskTypes';

    riskTypes: Array<RiskType>;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IPerRiskDeductible>) {
        super();

        this.typeSelector = PerRiskDeductible.TYPE_SELECTOR;
        this.riskTypes = new Array<RiskType>(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IPerRiskDeductible>): void {
        if (values) {
            super.setValues(values)
            const rawValues = values
            this.fillModelArray<IRiskType>(this, PerRiskDeductible.RISK_TYPES_FIELD_NAME, rawValues.riskTypes, RiskType, SubTypeFactory.createSubTypeInstance);
        }
    }
}
