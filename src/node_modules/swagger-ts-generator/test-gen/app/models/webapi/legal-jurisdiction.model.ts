/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IClause, Clause } from './clause.model';
import { ICustomClause, CustomClause } from './custom-clause.model';
import { IPredefinedClause, PredefinedClause } from './predefined-clause.model';
import { ICountry, Country } from './country.model';
import { ICountrySubdivision, CountrySubdivision } from './country-subdivision.model';

export interface ILegalJurisdiction {
    clauses?: Array<IClause | ICustomClause | IPredefinedClause>;
    country?: ICountry;
    gleifTerritory?: ICountrySubdivision;
}


export class LegalJurisdiction extends BaseModel implements ILegalJurisdiction  {

    static CLAUSES_FIELD_NAME = 'clauses';
    static COUNTRY_FIELD_NAME = 'country';
    static GLEIF_TERRITORY_FIELD_NAME = 'gleifTerritory';

    clauses: Array<Clause | CustomClause | PredefinedClause>;
    country: Country;
    gleifTerritory: CountrySubdivision;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<ILegalJurisdiction>) {
        super();
        this.clauses = new Array<Clause | CustomClause | PredefinedClause>(); 
        this.country = new Country(); 
        this.gleifTerritory = new CountrySubdivision(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<ILegalJurisdiction>): void {
        if (values) {
            
            const rawValues = values
            this.fillModelArray<IClause | ICustomClause | IPredefinedClause>(this, LegalJurisdiction.CLAUSES_FIELD_NAME, rawValues.clauses, Clause, SubTypeFactory.createSubTypeInstance);
            this.country.setValues(rawValues.country);
            this.gleifTerritory.setValues(rawValues.gleifTerritory);
        }
    }
}
