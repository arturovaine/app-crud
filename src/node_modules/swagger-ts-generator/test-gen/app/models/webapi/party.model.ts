/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IElectronicAddress, ElectronicAddress } from './electronic-address.model';
import { IPostalAddress, PostalAddress } from './postal-address.model';
import { IRegisteredIdentifier, RegisteredIdentifier } from './registered-identifier.model';
import { ITelephoneNumber, TelephoneNumber } from './telephone-number.model';

export interface IParty {
    electronicAddresses?: Array<IElectronicAddress>;
    id?: string;
    postalAddresses?: Array<IPostalAddress>;
    registeredIdentifiers?: Array<IRegisteredIdentifier>;
    telephoneNumbers?: Array<ITelephoneNumber>;
    typeSelector?: string;
}


export class Party extends BaseModel implements IParty  {
    static TYPE_SELECTOR = 'Party';

    static ELECTRONIC_ADDRESSES_FIELD_NAME = 'electronicAddresses';
    static ID_FIELD_NAME = 'id';
    static POSTAL_ADDRESSES_FIELD_NAME = 'postalAddresses';
    static REGISTERED_IDENTIFIERS_FIELD_NAME = 'registeredIdentifiers';
    static TELEPHONE_NUMBERS_FIELD_NAME = 'telephoneNumbers';
    static TYPE_SELECTOR_FIELD_NAME = 'typeSelector';

    electronicAddresses: Array<ElectronicAddress>;
    id: string;
    postalAddresses: Array<PostalAddress>;
    registeredIdentifiers: Array<RegisteredIdentifier>;
    telephoneNumbers: Array<TelephoneNumber>;
    typeSelector: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IParty>) {
        super();

        this.typeSelector = Party.TYPE_SELECTOR;
        this.electronicAddresses = new Array<ElectronicAddress>(); 
        this.postalAddresses = new Array<PostalAddress>(); 
        this.registeredIdentifiers = new Array<RegisteredIdentifier>(); 
        this.telephoneNumbers = new Array<TelephoneNumber>(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IParty>): void {
        if (values) {
            
            const rawValues = values
            this.fillModelArray<IElectronicAddress>(this, Party.ELECTRONIC_ADDRESSES_FIELD_NAME, rawValues.electronicAddresses, ElectronicAddress, SubTypeFactory.createSubTypeInstance);
            this.id = this.getValue<string>(rawValues, Party.ID_FIELD_NAME);
            this.fillModelArray<IPostalAddress>(this, Party.POSTAL_ADDRESSES_FIELD_NAME, rawValues.postalAddresses, PostalAddress, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<IRegisteredIdentifier>(this, Party.REGISTERED_IDENTIFIERS_FIELD_NAME, rawValues.registeredIdentifiers, RegisteredIdentifier, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<ITelephoneNumber>(this, Party.TELEPHONE_NUMBERS_FIELD_NAME, rawValues.telephoneNumbers, TelephoneNumber, SubTypeFactory.createSubTypeInstance);
            this.typeSelector = this.getValue<string>(rawValues, Party.TYPE_SELECTOR_FIELD_NAME);
        }
    }
}
