/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IInterest, Interest } from './interest.model';
import { IGeographicLocation, GeographicLocation } from './geographic-location.model';
import { ICountry, Country } from './country.model';
import { ICountrySubdivision, CountrySubdivision } from './country-subdivision.model';
import { IPeril, Peril } from './peril.model';
import { IRiskType, RiskType } from './risk-type.model';
import { InsuranceType } from './enums';

export interface IRiskScope {
    insuranceTypes?: Array<InsuranceType>;
    interests?: Array<IInterest>;
    locations?: Array<IGeographicLocation | ICountry | ICountrySubdivision>;
    perils?: Array<IPeril>;
    riskTypes?: Array<IRiskType>;
}


export class RiskScope extends BaseModel implements IRiskScope  {

    static INSURANCE_TYPES_FIELD_NAME = 'insuranceTypes';
    static INTERESTS_FIELD_NAME = 'interests';
    static LOCATIONS_FIELD_NAME = 'locations';
    static PERILS_FIELD_NAME = 'perils';
    static RISK_TYPES_FIELD_NAME = 'riskTypes';

    insuranceTypes: Array<InsuranceType>;
    interests: Array<Interest>;
    locations: Array<GeographicLocation | Country | CountrySubdivision>;
    perils: Array<Peril>;
    riskTypes: Array<RiskType>;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IRiskScope>) {
        super();
        this.insuranceTypes = new Array<InsuranceType>(); 
        this.interests = new Array<Interest>(); 
        this.locations = new Array<GeographicLocation | Country | CountrySubdivision>(); 
        this.perils = new Array<Peril>(); 
        this.riskTypes = new Array<RiskType>(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IRiskScope>): void {
        if (values) {
            
            const rawValues = values
            this.fillModelArray<InsuranceType>(this, RiskScope.INSURANCE_TYPES_FIELD_NAME, rawValues.insuranceTypes);
            this.fillModelArray<IInterest>(this, RiskScope.INTERESTS_FIELD_NAME, rawValues.interests, Interest, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<IGeographicLocation | ICountry | ICountrySubdivision>(this, RiskScope.LOCATIONS_FIELD_NAME, rawValues.locations, GeographicLocation, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<IPeril>(this, RiskScope.PERILS_FIELD_NAME, rawValues.perils, Peril, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<IRiskType>(this, RiskScope.RISK_TYPES_FIELD_NAME, rawValues.riskTypes, RiskType, SubTypeFactory.createSubTypeInstance);
        }
    }
}
