/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IReinsuranceContract, ReinsuranceContract } from './reinsurance-contract.model';
import { IInsuranceContractSubmission, InsuranceContractSubmission } from './insurance-contract-submission.model';
import { InsuranceContractProcessStatus } from './enums';
import { InsuranceContractSubmissionCommand } from './enums';
import { TransactionStatus } from './enums';

export interface IContractSubmissionContainer {
    contract?: IReinsuranceContract;
    contractTargetStatus?: InsuranceContractProcessStatus;
    process?: IInsuranceContractSubmission;
    processCommand?: InsuranceContractSubmissionCommand;
    transactionStatus?: TransactionStatus;
    transitoryState?: boolean;
}


export class ContractSubmissionContainer extends BaseModel implements IContractSubmissionContainer  {

    static CONTRACT_FIELD_NAME = 'contract';
    static CONTRACT_TARGET_STATUS_FIELD_NAME = 'contractTargetStatus';
    static PROCESS_FIELD_NAME = 'process';
    static PROCESS_COMMAND_FIELD_NAME = 'processCommand';
    static TRANSACTION_STATUS_FIELD_NAME = 'transactionStatus';
    static TRANSITORY_STATE_FIELD_NAME = 'transitoryState';

    contract: ReinsuranceContract;
    contractTargetStatus: InsuranceContractProcessStatus;
    process: InsuranceContractSubmission;
    processCommand: InsuranceContractSubmissionCommand;
    transactionStatus: TransactionStatus;
    transitoryState: boolean;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IContractSubmissionContainer>) {
        super();
        this.contract = new ReinsuranceContract(); 
        this.process = new InsuranceContractSubmission(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IContractSubmissionContainer>): void {
        if (values) {
            
            const rawValues = values
            this.contract.setValues(rawValues.contract);
            this.contractTargetStatus = this.getValue<InsuranceContractProcessStatus>(rawValues, ContractSubmissionContainer.CONTRACT_TARGET_STATUS_FIELD_NAME);
            this.process.setValues(rawValues.process);
            this.processCommand = this.getValue<InsuranceContractSubmissionCommand>(rawValues, ContractSubmissionContainer.PROCESS_COMMAND_FIELD_NAME);
            this.transactionStatus = this.getValue<TransactionStatus>(rawValues, ContractSubmissionContainer.TRANSACTION_STATUS_FIELD_NAME);
            this.transitoryState = this.getValue<boolean>(rawValues, ContractSubmissionContainer.TRANSITORY_STATE_FIELD_NAME);
        }
    }
}
