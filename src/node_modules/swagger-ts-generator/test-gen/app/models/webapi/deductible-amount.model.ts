/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IMoney, Money } from './money.model';

export interface IDeductibleAmount {
    amount?: IMoney;
    typeSelector?: string;
}


export class DeductibleAmount extends BaseModel implements IDeductibleAmount  {
    static TYPE_SELECTOR = 'DeductibleAmount';

    static AMOUNT_FIELD_NAME = 'amount';
    static TYPE_SELECTOR_FIELD_NAME = 'typeSelector';

    amount: Money;
    typeSelector: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IDeductibleAmount>) {
        super();

        this.typeSelector = DeductibleAmount.TYPE_SELECTOR;
        this.amount = new Money(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IDeductibleAmount>): void {
        if (values) {
            
            const rawValues = values
            this.amount.setValues(rawValues.amount);
            this.typeSelector = this.getValue<string>(rawValues, DeductibleAmount.TYPE_SELECTOR_FIELD_NAME);
        }
    }
}
