/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

import { BoundedPeriod } from './bounded-period.model';
import { BureauLeader } from './bureau-leader.model';
import { Cedent } from './cedent.model';
import { CoAgreementParty } from './co-agreement-party.model';
import { Company } from './company.model';
import { ContractHolder } from './contract-holder.model';
import { Country } from './country.model';
import { CountrySubdivision } from './country-subdivision.model';
import { CoverHolder } from './cover-holder.model';
import { ElectronicAddress } from './electronic-address.model';
import { FinancialBroker } from './financial-broker.model';
import { InsuranceBroker } from './insurance-broker.model';
import { Insured } from './insured.model';
import { Party } from './party.model';
import { PartyRoleInContract } from './party-role-in-contract.model';
import { Period } from './period.model';
import { Person } from './person.model';
import { PostalAddress } from './postal-address.model';
import { PricingLeader } from './pricing-leader.model';
import { PrimaryInsurer } from './primary-insurer.model';
import { ProducingBroker } from './producing-broker.model';
import { ProducingContractHolder } from './producing-contract-holder.model';
import { ProducingInsurer } from './producing-insurer.model';
import { Reinsurer } from './reinsurer.model';
import { SlipLeader } from './slip-leader.model';
import { TelephoneNumber } from './telephone-number.model';
import { AggregatedPremium } from './aggregated-premium.model';
import { AnnualDeductible } from './annual-deductible.model';
import { AnnualLimit } from './annual-limit.model';
import { CashCallTerms } from './cash-call-terms.model';
import { Clause } from './clause.model';
import { Commission } from './commission.model';
import { ContractDurationDeductible } from './contract-duration-deductible.model';
import { ContractDurationLimit } from './contract-duration-limit.model';
import { CustomClause } from './custom-clause.model';
import { CustomPeriodDeductible } from './custom-period-deductible.model';
import { CustomPeriodLimit } from './custom-period-limit.model';
import { Deductible } from './deductible.model';
import { DeductibleAmount } from './deductible-amount.model';
import { FacultativeReinsuranceRisk } from './facultative-reinsurance-risk.model';
import { Fee } from './fee.model';
import { FlatCommission } from './flat-commission.model';
import { FlatDeductibleAmount } from './flat-deductible-amount.model';
import { FlatLimitAmount } from './flat-limit-amount.model';
import { FlatPremium } from './flat-premium.model';
import { GeographicLocation } from './geographic-location.model';
import { Insurer } from './insurer.model';
import { LifeTimeLimit } from './life-time-limit.model';
import { Limit } from './limit.model';
import { LimitAmount } from './limit-amount.model';
import { LossAdviceTerms } from './loss-advice-terms.model';
import { LossTerm } from './loss-term.model';
import { PerEventDeductible } from './per-event-deductible.model';
import { PerEventLimit } from './per-event-limit.model';
import { PerLossDeductible } from './per-loss-deductible.model';
import { PerLossLimit } from './per-loss-limit.model';
import { PerPeriodDeductible } from './per-period-deductible.model';
import { PerPeriodLimit } from './per-period-limit.model';
import { PerPolicyDeductible } from './per-policy-deductible.model';
import { PerPolicyLimit } from './per-policy-limit.model';
import { PerRiskDeductible } from './per-risk-deductible.model';
import { PerRiskLimit } from './per-risk-limit.model';
import { PredefinedClause } from './predefined-clause.model';
import { Premium } from './premium.model';
import { PrimaryInsuranceContract } from './primary-insurance-contract.model';
import { PrimaryRisk } from './primary-risk.model';
import { RateBasedCommission } from './rate-based-commission.model';
import { RateBasedPremium } from './rate-based-premium.model';
import { RatedDeductibleAmount } from './rated-deductible-amount.model';
import { RatedLimitAmount } from './rated-limit-amount.model';
import { ReinsuranceContract } from './reinsurance-contract.model';
import { ReinsuranceRisk } from './reinsurance-risk.model';
import { Risk } from './risk.model';
import { RiskCoverage } from './risk-coverage.model';
import { RiskPlacement } from './risk-placement.model';
import { AbstractDiffField } from './abstract-diff-field.model';
import { ContractDiffClause } from './contract-diff-clause.model';
import { ContractDiffField } from './contract-diff-field.model';
import { ContractDiffWording } from './contract-diff-wording.model';
import { InsuranceContractNegotiation } from './insurance-contract-negotiation.model';
import { Claimant } from './claimant.model';
import { Claimee } from './claimee.model';
import { PartyRoleInClaim } from './party-role-in-claim.model';
import { LossEvent } from './loss-event.model';
import { LossEventSummary } from './loss-event-summary.model';
import { IssueCompany } from './issue-company.model';
import { InsuranceContractBinding } from './insurance-contract-binding.model';
import { InsuranceContractChange } from './insurance-contract-change.model';
import { InsuranceContractQuotation } from './insurance-contract-quotation.model';
import { InsuranceContractSigning } from './insurance-contract-signing.model';
import { InsuranceContractSubmission } from './insurance-contract-submission.model';
import { AzureFile } from './azure-file.model';
import { BomBaseReinsuranceSection } from './bom-base-reinsurance-section.model';
import { BomCatXolReinsuranceLayer } from './bom-cat-xol-reinsurance-layer.model';
import { BomCatXolReinsuranceSection } from './bom-cat-xol-reinsurance-section.model';
import { BomQuotaShareLayer } from './bom-quota-share-layer.model';
import { BomQuotaShareSection } from './bom-quota-share-section.model';
import { InsuranceProgramProducer } from './insurance-program-producer.model';
import { ReportingDataExchange } from './reporting-data-exchange.model';

export class SubTypeFactory {
    /**
     * create subType based on the value if the typeSelector property
     */
    static createSubTypeInstance(value: any): object {
        switch (value.typeSelector) {
            case 'BoundedPeriod':
                return new BoundedPeriod(value);
            case 'BureauLeader':
                return new BureauLeader(value);
            case 'Cedent':
                return new Cedent(value);
            case 'CoAgreementParty':
                return new CoAgreementParty(value);
            case 'Company':
                return new Company(value);
            case 'ContractHolder':
                return new ContractHolder(value);
            case 'Country':
                return new Country(value);
            case 'CountrySubdivision':
                return new CountrySubdivision(value);
            case 'CoverHolder':
                return new CoverHolder(value);
            case 'ElectronicAddress':
                return new ElectronicAddress(value);
            case 'FinancialBroker':
                return new FinancialBroker(value);
            case 'InsuranceBroker':
                return new InsuranceBroker(value);
            case 'Insured':
                return new Insured(value);
            case 'Party':
                return new Party(value);
            case 'PartyRoleInContract':
                return new PartyRoleInContract(value);
            case 'Period':
                return new Period(value);
            case 'Person':
                return new Person(value);
            case 'PostalAddress':
                return new PostalAddress(value);
            case 'PricingLeader':
                return new PricingLeader(value);
            case 'PrimaryInsurer':
                return new PrimaryInsurer(value);
            case 'ProducingBroker':
                return new ProducingBroker(value);
            case 'ProducingContractHolder':
                return new ProducingContractHolder(value);
            case 'ProducingInsurer':
                return new ProducingInsurer(value);
            case 'Reinsurer':
                return new Reinsurer(value);
            case 'SlipLeader':
                return new SlipLeader(value);
            case 'TelephoneNumber':
                return new TelephoneNumber(value);
            case 'AggregatedPremium':
                return new AggregatedPremium(value);
            case 'AnnualDeductible':
                return new AnnualDeductible(value);
            case 'AnnualLimit':
                return new AnnualLimit(value);
            case 'CashCallTerms':
                return new CashCallTerms(value);
            case 'Clause':
                return new Clause(value);
            case 'Commission':
                return new Commission(value);
            case 'ContractDurationDeductible':
                return new ContractDurationDeductible(value);
            case 'ContractDurationLimit':
                return new ContractDurationLimit(value);
            case 'CustomClause':
                return new CustomClause(value);
            case 'CustomPeriodDeductible':
                return new CustomPeriodDeductible(value);
            case 'CustomPeriodLimit':
                return new CustomPeriodLimit(value);
            case 'Deductible':
                return new Deductible(value);
            case 'DeductibleAmount':
                return new DeductibleAmount(value);
            case 'FacultativeReinsuranceRisk':
                return new FacultativeReinsuranceRisk(value);
            case 'Fee':
                return new Fee(value);
            case 'FlatCommission':
                return new FlatCommission(value);
            case 'FlatDeductibleAmount':
                return new FlatDeductibleAmount(value);
            case 'FlatLimitAmount':
                return new FlatLimitAmount(value);
            case 'FlatPremium':
                return new FlatPremium(value);
            case 'GeographicLocation':
                return new GeographicLocation(value);
            case 'Insurer':
                return new Insurer(value);
            case 'LifeTimeLimit':
                return new LifeTimeLimit(value);
            case 'Limit':
                return new Limit(value);
            case 'LimitAmount':
                return new LimitAmount(value);
            case 'LossAdviceTerms':
                return new LossAdviceTerms(value);
            case 'LossTerm':
                return new LossTerm(value);
            case 'PerEventDeductible':
                return new PerEventDeductible(value);
            case 'PerEventLimit':
                return new PerEventLimit(value);
            case 'PerLossDeductible':
                return new PerLossDeductible(value);
            case 'PerLossLimit':
                return new PerLossLimit(value);
            case 'PerPeriodDeductible':
                return new PerPeriodDeductible(value);
            case 'PerPeriodLimit':
                return new PerPeriodLimit(value);
            case 'PerPolicyDeductible':
                return new PerPolicyDeductible(value);
            case 'PerPolicyLimit':
                return new PerPolicyLimit(value);
            case 'PerRiskDeductible':
                return new PerRiskDeductible(value);
            case 'PerRiskLimit':
                return new PerRiskLimit(value);
            case 'PredefinedClause':
                return new PredefinedClause(value);
            case 'Premium':
                return new Premium(value);
            case 'PrimaryInsuranceContract':
                return new PrimaryInsuranceContract(value);
            case 'PrimaryRisk':
                return new PrimaryRisk(value);
            case 'RateBasedCommission':
                return new RateBasedCommission(value);
            case 'RateBasedPremium':
                return new RateBasedPremium(value);
            case 'RatedDeductibleAmount':
                return new RatedDeductibleAmount(value);
            case 'RatedLimitAmount':
                return new RatedLimitAmount(value);
            case 'ReinsuranceContract':
                return new ReinsuranceContract(value);
            case 'ReinsuranceRisk':
                return new ReinsuranceRisk(value);
            case 'Risk':
                return new Risk(value);
            case 'RiskCoverage':
                return new RiskCoverage(value);
            case 'RiskPlacement':
                return new RiskPlacement(value);
            case 'AbstractDiffField':
                return new AbstractDiffField(value);
            case 'ContractDiffClause':
                return new ContractDiffClause(value);
            case 'ContractDiffField':
                return new ContractDiffField(value);
            case 'ContractDiffWording':
                return new ContractDiffWording(value);
            case 'InsuranceContractNegotiation':
                return new InsuranceContractNegotiation(value);
            case 'Claimant':
                return new Claimant(value);
            case 'Claimee':
                return new Claimee(value);
            case 'PartyRoleInClaim':
                return new PartyRoleInClaim(value);
            case 'LossEvent':
                return new LossEvent(value);
            case 'LossEventSummary':
                return new LossEventSummary(value);
            case 'IssueCompany':
                return new IssueCompany(value);
            case 'InsuranceContractBinding':
                return new InsuranceContractBinding(value);
            case 'InsuranceContractChange':
                return new InsuranceContractChange(value);
            case 'InsuranceContractQuotation':
                return new InsuranceContractQuotation(value);
            case 'InsuranceContractSigning':
                return new InsuranceContractSigning(value);
            case 'InsuranceContractSubmission':
                return new InsuranceContractSubmission(value);
            case 'AzureFile':
                return new AzureFile(value);
            case 'BomBaseReinsuranceSection':
                return new BomBaseReinsuranceSection(value);
            case 'BomCatXolReinsuranceLayer':
                return new BomCatXolReinsuranceLayer(value);
            case 'BomCatXolReinsuranceSection':
                return new BomCatXolReinsuranceSection(value);
            case 'BomQuotaShareLayer':
                return new BomQuotaShareLayer(value);
            case 'BomQuotaShareSection':
                return new BomQuotaShareSection(value);
            case 'InsuranceProgramProducer':
                return new InsuranceProgramProducer(value);
            case 'ReportingDataExchange':
                return new ReportingDataExchange(value);
            default:
                throw new Error(`${value.typeSelector} not supported here`);
        }
    }
}
