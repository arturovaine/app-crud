/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IDocument, Document } from './document.model';
import { IBoundedPeriod, BoundedPeriod } from './bounded-period.model';
import { ILegalJurisdiction, LegalJurisdiction } from './legal-jurisdiction.model';
import { ICompany, Company } from './company.model';
import { IPerson, Person } from './person.model';
import { IInsuranceProgramProducer, InsuranceProgramProducer } from './insurance-program-producer.model';
import { IRiskScope, RiskScope } from './risk-scope.model';
import { IStateChangeRecord, StateChangeRecord } from './state-change-record.model';
import { IMoney, Money } from './money.model';
import { TotalPremiumType } from './enums';

export interface IInsuranceProgram {
    actionExpected?: boolean;
    description?: string;
    documents?: Array<IDocument>;
    effectivePeriod?: IBoundedPeriod;
    id?: string;
    legalJurisdiction?: ILegalJurisdiction;
    name: string;
    owner?: ICompany | IPerson;
    partyRolesInContract?: Array<IInsuranceProgramProducer>;
    referenceCurrency?: string;
    scopesCovered?: Array<IRiskScope>;
    stateChangeRecordDtos?: Array<IStateChangeRecord>;
    totalPremium?: IMoney;
    totalPremiumType?: TotalPremiumType;
    totalSumInsured?: IMoney;
    transitory?: boolean;
    version?: number;
}


export class InsuranceProgram extends BaseModel implements IInsuranceProgram  {

    static ACTION_EXPECTED_FIELD_NAME = 'actionExpected';
    static DESCRIPTION_FIELD_NAME = 'description';
    static DOCUMENTS_FIELD_NAME = 'documents';
    static EFFECTIVE_PERIOD_FIELD_NAME = 'effectivePeriod';
    static ID_FIELD_NAME = 'id';
    static LEGAL_JURISDICTION_FIELD_NAME = 'legalJurisdiction';
    static NAME_FIELD_NAME = 'name';
    static OWNER_FIELD_NAME = 'owner';
    static PARTY_ROLES_IN_CONTRACT_FIELD_NAME = 'partyRolesInContract';
    static REFERENCE_CURRENCY_FIELD_NAME = 'referenceCurrency';
    static SCOPES_COVERED_FIELD_NAME = 'scopesCovered';
    static STATE_CHANGE_RECORD_DTOS_FIELD_NAME = 'stateChangeRecordDtos';
    static TOTAL_PREMIUM_FIELD_NAME = 'totalPremium';
    static TOTAL_PREMIUM_TYPE_FIELD_NAME = 'totalPremiumType';
    static TOTAL_SUM_INSURED_FIELD_NAME = 'totalSumInsured';
    static TRANSITORY_FIELD_NAME = 'transitory';
    static VERSION_FIELD_NAME = 'version';

    actionExpected: boolean;
    description: string;
    documents: Array<Document>;
    effectivePeriod: BoundedPeriod;
    id: string;
    legalJurisdiction: LegalJurisdiction;
    name: string;
    owner: Company | Person;
    partyRolesInContract: Array<InsuranceProgramProducer>;
    referenceCurrency: string;
    scopesCovered: Array<RiskScope>;
    stateChangeRecordDtos: Array<StateChangeRecord>;
    totalPremium: Money;
    totalPremiumType: TotalPremiumType;
    totalSumInsured: Money;
    transitory: boolean;
    version: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IInsuranceProgram>) {
        super();
        this.documents = new Array<Document>(); 
        this.effectivePeriod = new BoundedPeriod(); 
        this.legalJurisdiction = new LegalJurisdiction(); 
        this.owner = new Company(); 
        this.partyRolesInContract = new Array<InsuranceProgramProducer>(); 
        this.scopesCovered = new Array<RiskScope>(); 
        this.stateChangeRecordDtos = new Array<StateChangeRecord>(); 
        this.totalPremium = new Money(); 
        this.totalSumInsured = new Money(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IInsuranceProgram>): void {
        if (values) {
            
            const rawValues = values
            this.actionExpected = this.getValue<boolean>(rawValues, InsuranceProgram.ACTION_EXPECTED_FIELD_NAME);
            this.description = this.getValue<string>(rawValues, InsuranceProgram.DESCRIPTION_FIELD_NAME);
            this.fillModelArray<IDocument>(this, InsuranceProgram.DOCUMENTS_FIELD_NAME, rawValues.documents, Document, SubTypeFactory.createSubTypeInstance);
            this.effectivePeriod.setValues(rawValues.effectivePeriod);
            this.id = this.getValue<string>(rawValues, InsuranceProgram.ID_FIELD_NAME);
            this.legalJurisdiction.setValues(rawValues.legalJurisdiction);
            this.name = this.getValue<string>(rawValues, InsuranceProgram.NAME_FIELD_NAME);
            if (rawValues.owner && rawValues.owner.typeSelector &&
                this.owner.typeSelector !== rawValues.owner.typeSelector) {
                this.owner = SubTypeFactory.createSubTypeInstance(rawValues.owner) as Company | Person;
            }
            this.owner.setValues(rawValues.owner);
            this.fillModelArray<IInsuranceProgramProducer>(this, InsuranceProgram.PARTY_ROLES_IN_CONTRACT_FIELD_NAME, rawValues.partyRolesInContract, InsuranceProgramProducer, SubTypeFactory.createSubTypeInstance);
            this.referenceCurrency = this.getValue<string>(rawValues, InsuranceProgram.REFERENCE_CURRENCY_FIELD_NAME);
            this.fillModelArray<IRiskScope>(this, InsuranceProgram.SCOPES_COVERED_FIELD_NAME, rawValues.scopesCovered, RiskScope, SubTypeFactory.createSubTypeInstance);
            this.fillModelArray<IStateChangeRecord>(this, InsuranceProgram.STATE_CHANGE_RECORD_DTOS_FIELD_NAME, rawValues.stateChangeRecordDtos, StateChangeRecord, SubTypeFactory.createSubTypeInstance);
            this.totalPremium.setValues(rawValues.totalPremium);
            this.totalPremiumType = this.getValue<TotalPremiumType>(rawValues, InsuranceProgram.TOTAL_PREMIUM_TYPE_FIELD_NAME);
            this.totalSumInsured.setValues(rawValues.totalSumInsured);
            this.transitory = this.getValue<boolean>(rawValues, InsuranceProgram.TRANSITORY_FIELD_NAME);
            this.version = this.getValue<number>(rawValues, InsuranceProgram.VERSION_FIELD_NAME);
        }
    }
}
