/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { ISoftReference, SoftReference } from './soft-reference.model';
import { IServiceProvisionType, ServiceProvisionType } from './service-provision-type.model';

export interface IServiceProvision {
    protocolSupported?: Array<ISoftReference>;
    type?: IServiceProvisionType;
}


export class ServiceProvision extends BaseModel implements IServiceProvision  {

    static PROTOCOL_SUPPORTED_FIELD_NAME = 'protocolSupported';
    static TYPE_FIELD_NAME = 'type';

    protocolSupported: Array<SoftReference>;
    type: ServiceProvisionType;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IServiceProvision>) {
        super();
        this.protocolSupported = new Array<SoftReference>(); 
        this.type = new ServiceProvisionType(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IServiceProvision>): void {
        if (values) {
            
            const rawValues = values
            this.fillModelArray<ISoftReference>(this, ServiceProvision.PROTOCOL_SUPPORTED_FIELD_NAME, rawValues.protocolSupported, SoftReference, SubTypeFactory.createSubTypeInstance);
            this.type.setValues(rawValues.type);
        }
    }
}
