/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IPremium, Premium } from './premium.model';
import { IMoney, Money } from './money.model';

export interface IAggregatedPremium extends IPremium{
    estimatedAmount?: IMoney;
    estimatedAnnualisedAmount?: IMoney;
    minimumAmount?: IMoney;
    depositAmount?: IMoney;
}


export class AggregatedPremium extends Premium implements IAggregatedPremium  {
    static TYPE_SELECTOR = 'AggregatedPremium';

    static ESTIMATED_AMOUNT_FIELD_NAME = 'estimatedAmount';
    static ESTIMATED_ANNUALISED_AMOUNT_FIELD_NAME = 'estimatedAnnualisedAmount';
    static MINIMUM_AMOUNT_FIELD_NAME = 'minimumAmount';
    static DEPOSIT_AMOUNT_FIELD_NAME = 'depositAmount';

    estimatedAmount: Money;
    estimatedAnnualisedAmount: Money;
    minimumAmount: Money;
    depositAmount: Money;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IAggregatedPremium>) {
        super();

        this.typeSelector = AggregatedPremium.TYPE_SELECTOR;
        this.estimatedAmount = new Money(); 
        this.estimatedAnnualisedAmount = new Money(); 
        this.minimumAmount = new Money(); 
        this.depositAmount = new Money(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IAggregatedPremium>): void {
        if (values) {
            super.setValues(values)
            const rawValues = values
            this.estimatedAmount.setValues(rawValues.estimatedAmount);
            this.estimatedAnnualisedAmount.setValues(rawValues.estimatedAnnualisedAmount);
            this.minimumAmount.setValues(rawValues.minimumAmount);
            this.depositAmount.setValues(rawValues.depositAmount);
        }
    }
}
