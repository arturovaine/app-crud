/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IMessageContext, MessageContext } from './message-context.model';

export interface IMessage {
    context: Array<IMessageContext>;
    id?: string;
    message: string;
    pseudonymousSender?: string;
    readTime?: Date;
    reason?: string;
    receivingPartyId: string;
    seen?: boolean;
    senderNickname?: string;
    sendingPartyId: string;
    sendingPerson?: string;
    timeSent?: Date;
}


export class Message extends BaseModel implements IMessage  {

    static CONTEXT_FIELD_NAME = 'context';
    static ID_FIELD_NAME = 'id';
    static MESSAGE_FIELD_NAME = 'message';
    static PSEUDONYMOUS_SENDER_FIELD_NAME = 'pseudonymousSender';
    static READ_TIME_FIELD_NAME = 'readTime';
    static REASON_FIELD_NAME = 'reason';
    static RECEIVING_PARTY_ID_FIELD_NAME = 'receivingPartyId';
    static SEEN_FIELD_NAME = 'seen';
    static SENDER_NICKNAME_FIELD_NAME = 'senderNickname';
    static SENDING_PARTY_ID_FIELD_NAME = 'sendingPartyId';
    static SENDING_PERSON_FIELD_NAME = 'sendingPerson';
    static TIME_SENT_FIELD_NAME = 'timeSent';

    context: Array<MessageContext>;
    id: string;
    message: string;
    pseudonymousSender: string;
    readTime: Date;
    reason: string;
    receivingPartyId: string;
    seen: boolean;
    senderNickname: string;
    sendingPartyId: string;
    sendingPerson: string;
    timeSent: Date;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IMessage>) {
        super();
        this.context = new Array<MessageContext>(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IMessage>): void {
        if (values) {
            
            const rawValues = values
            this.fillModelArray<IMessageContext>(this, Message.CONTEXT_FIELD_NAME, rawValues.context, MessageContext, SubTypeFactory.createSubTypeInstance);
            this.id = this.getValue<string>(rawValues, Message.ID_FIELD_NAME);
            this.message = this.getValue<string>(rawValues, Message.MESSAGE_FIELD_NAME);
            this.pseudonymousSender = this.getValue<string>(rawValues, Message.PSEUDONYMOUS_SENDER_FIELD_NAME);
            this.readTime = this.getValue<Date>(rawValues, Message.READ_TIME_FIELD_NAME);
            this.reason = this.getValue<string>(rawValues, Message.REASON_FIELD_NAME);
            this.receivingPartyId = this.getValue<string>(rawValues, Message.RECEIVING_PARTY_ID_FIELD_NAME);
            this.seen = this.getValue<boolean>(rawValues, Message.SEEN_FIELD_NAME);
            this.senderNickname = this.getValue<string>(rawValues, Message.SENDER_NICKNAME_FIELD_NAME);
            this.sendingPartyId = this.getValue<string>(rawValues, Message.SENDING_PARTY_ID_FIELD_NAME);
            this.sendingPerson = this.getValue<string>(rawValues, Message.SENDING_PERSON_FIELD_NAME);
            this.timeSent = this.getValue<Date>(rawValues, Message.TIME_SENT_FIELD_NAME);
        }
    }
}
