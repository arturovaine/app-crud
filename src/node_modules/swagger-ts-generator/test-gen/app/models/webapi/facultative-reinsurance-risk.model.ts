/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IRisk, Risk } from './risk.model';
import { ISoftReference, SoftReference } from './soft-reference.model';

export interface IFacultativeReinsuranceRisk extends IRisk{
    coveredContracts?: Array<ISoftReference>;
    reinsuredCoverage?: string;
}


export class FacultativeReinsuranceRisk extends Risk implements IFacultativeReinsuranceRisk  {
    static TYPE_SELECTOR = 'FacultativeReinsuranceRisk';

    static COVERED_CONTRACTS_FIELD_NAME = 'coveredContracts';
    static REINSURED_COVERAGE_FIELD_NAME = 'reinsuredCoverage';

    coveredContracts: Array<SoftReference>;
    reinsuredCoverage: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IFacultativeReinsuranceRisk>) {
        super();

        this.typeSelector = FacultativeReinsuranceRisk.TYPE_SELECTOR;
        this.coveredContracts = new Array<SoftReference>(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IFacultativeReinsuranceRisk>): void {
        if (values) {
            super.setValues(values)
            const rawValues = values
            this.fillModelArray<ISoftReference>(this, FacultativeReinsuranceRisk.COVERED_CONTRACTS_FIELD_NAME, rawValues.coveredContracts, SoftReference, SubTypeFactory.createSubTypeInstance);
            this.reinsuredCoverage = this.getValue<string>(rawValues, FacultativeReinsuranceRisk.REINSURED_COVERAGE_FIELD_NAME);
        }
    }
}
