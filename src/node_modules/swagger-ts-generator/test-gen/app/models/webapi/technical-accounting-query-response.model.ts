/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IAccountItemView, AccountItemView } from './account-item-view.model';
import { IPageResponse, PageResponse } from './page-response.model';
import { ITechnicalAccountingQuery, TechnicalAccountingQuery } from './technical-accounting-query.model';
import { ISort, Sort } from './sort.model';

export interface ITechnicalAccountingQueryResponse {
    content?: Array<IAccountItemView>;
    pageResponse?: IPageResponse;
    query?: ITechnicalAccountingQuery;
    sort?: ISort;
}


export class TechnicalAccountingQueryResponse extends BaseModel implements ITechnicalAccountingQueryResponse  {

    static CONTENT_FIELD_NAME = 'content';
    static PAGE_RESPONSE_FIELD_NAME = 'pageResponse';
    static QUERY_FIELD_NAME = 'query';
    static SORT_FIELD_NAME = 'sort';

    content: Array<AccountItemView>;
    pageResponse: PageResponse;
    query: TechnicalAccountingQuery;
    sort: Sort;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<ITechnicalAccountingQueryResponse>) {
        super();
        this.content = new Array<AccountItemView>(); 
        this.pageResponse = new PageResponse(); 
        this.query = new TechnicalAccountingQuery(); 
        this.sort = new Sort(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<ITechnicalAccountingQueryResponse>): void {
        if (values) {
            
            const rawValues = values
            this.fillModelArray<IAccountItemView>(this, TechnicalAccountingQueryResponse.CONTENT_FIELD_NAME, rawValues.content, AccountItemView, SubTypeFactory.createSubTypeInstance);
            this.pageResponse.setValues(rawValues.pageResponse);
            this.query.setValues(rawValues.query);
            this.sort.setValues(rawValues.sort);
        }
    }
}
