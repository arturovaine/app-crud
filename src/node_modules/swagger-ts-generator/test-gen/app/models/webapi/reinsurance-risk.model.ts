/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IRisk, Risk } from './risk.model';
import { ISoftReference, SoftReference } from './soft-reference.model';

export interface IReinsuranceRisk extends IRisk{
    portfolios?: Array<ISoftReference>;
}


export class ReinsuranceRisk extends Risk implements IReinsuranceRisk  {
    static TYPE_SELECTOR = 'ReinsuranceRisk';

    static PORTFOLIOS_FIELD_NAME = 'portfolios';

    portfolios: Array<SoftReference>;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IReinsuranceRisk>) {
        super();

        this.typeSelector = ReinsuranceRisk.TYPE_SELECTOR;
        this.portfolios = new Array<SoftReference>(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IReinsuranceRisk>): void {
        if (values) {
            super.setValues(values)
            const rawValues = values
            this.fillModelArray<ISoftReference>(this, ReinsuranceRisk.PORTFOLIOS_FIELD_NAME, rawValues.portfolios, SoftReference, SubTypeFactory.createSubTypeInstance);
        }
    }
}
