/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IProcessAction, ProcessAction } from './process-action.model';
import { IReinsuranceContract, ReinsuranceContract } from './reinsurance-contract.model';
import { IPrimaryInsuranceContract, PrimaryInsuranceContract } from './primary-insurance-contract.model';
import { IInsuranceContractNegotiation, InsuranceContractNegotiation } from './insurance-contract-negotiation.model';

export interface IInsuranceContractNegotiationProcessContainer {
    action?: IProcessAction;
    contract?: IReinsuranceContract;
    originalPolicy?: IPrimaryInsuranceContract;
    process?: IInsuranceContractNegotiation;
}


export class InsuranceContractNegotiationProcessContainer extends BaseModel implements IInsuranceContractNegotiationProcessContainer  {

    static ACTION_FIELD_NAME = 'action';
    static CONTRACT_FIELD_NAME = 'contract';
    static ORIGINAL_POLICY_FIELD_NAME = 'originalPolicy';
    static PROCESS_FIELD_NAME = 'process';

    action: ProcessAction;
    contract: ReinsuranceContract;
    originalPolicy: PrimaryInsuranceContract;
    process: InsuranceContractNegotiation;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    */
    constructor(values?: Partial<IInsuranceContractNegotiationProcessContainer>) {
        super();
        this.action = new ProcessAction(); 
        this.contract = new ReinsuranceContract(); 
        this.originalPolicy = new PrimaryInsuranceContract(); 
        this.process = new InsuranceContractNegotiation(); 

        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IInsuranceContractNegotiationProcessContainer>): void {
        if (values) {
            
            const rawValues = values
            this.action.setValues(rawValues.action);
            this.contract.setValues(rawValues.contract);
            this.originalPolicy.setValues(rawValues.originalPolicy);
            this.process.setValues(rawValues.process);
        }
    }
}
